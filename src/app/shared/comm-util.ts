import { Language } from "../model/user.model";

export class CU {
	static monthOptions = { year: "numeric", month: "long" } as const;
	static dateOptions = {
		year: "numeric",
		month: "long",
		day: "2-digit",
	} as const;

	static err = {
		0: "‡§Æ‡§æ‡§´ ‡§ï‡§∞‡§®‡§æ ‡§ï‡•Å‡§õ ‡§ó‡•ú‡§¨‡•ú ‡§π‡•ã ‡§ó‡§Ø‡•Ä!",
	} as const;
	static msg = {
		0: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á $,\n\n‡§Ü‡§™‡§ï‡§æ *$* ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡§æ RD ‡§ï‡§æ *‚Çπ$* ‡§≤‡•á‡§®‡§æ ‡§¨‡§æ‡§ï‡•Ä ‡§π‡•à!\n‡§ï‡•É‡§™‡§Ø‡§æ *$* ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç!\n\n‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ ",
	} as const;

	static key = "678dfs983hjbd0dhjk089ck.,/apoioa";

	static translation: any = {
		"‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡•á ‡§ñ‡§æ‡§§‡•á ‡§¶‡•á‡§ñ‡§®‡•á ‡§π‡•à‡§Ç: ": "Item per page: ",
		"RD ‡§ï‡§≤‡•á‡§ï‡•ç‡§ü‡§∞": "RD Collector",
		"‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡•á‡§≤ ‡§ñ‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§ï‡•ã‡§à ‡§ñ‡§æ‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ":
			"filter didn't match any account",
		"‡§ñ‡§æ‡§§‡§æ ‡§®‡§Ç‡§¨‡§∞": "Account No.",
		‡§®‡§æ‡§Æ: "Name",
		‡§ï‡§ø‡§∏‡•ç‡§§: "Installment",
		"‡§®‡§æ‡§Æ ‡§ñ‡•ã‡§ú‡•á": "Account Search",
		"‡§®‡§Ø‡§æ ‡§ñ‡§æ‡§§‡§æ": "New Account",
		"‡§ñ‡§æ‡§§‡§æ ‡§®‡§Ç‡§¨‡§∞ $ ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡§æ‡§µ": "Changes in Account No. $",
		"‡§ñ‡§æ‡§§‡§æ ‡§®‡§Ç‡§¨‡§∞ <strong>‡§ú‡§∞‡•Ç‡§∞‡•Ä</strong> ‡§π‡•à‡§Ç":
			"Account No. is <strong>required</strong>",
		‡§π‡•à‡§Ç: "",
		"‡§ñ‡§æ‡§§‡§æ ‡§ß‡§æ‡§∞‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ": "Account Name",
		"‡§ñ‡§æ‡§§‡§æ ‡§ß‡§æ‡§∞‡§ï ‡§ï‡§æ ‡§®‡§æ‡§Æ <strong>‡§ú‡§∞‡•Ç‡§∞‡•Ä</strong> ‡§π‡•à‡§Ç":
			"Account Name is <strong>required</strong>",
		"‡§ï‡§æ‡§∞‡•ç‡§° ‡§®‡§Ç‡§¨‡§∞": "Card No.",
		"‡§ñ‡§æ‡§§‡§æ ‡§Ü‡§∞‡§Ç‡§≠ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ": "Account Start Date",
		"‡§Ü‡§∞‡§Ç‡§≠ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ ‡§°‡§æ‡§≤‡§®‡§æ <strong>‡§ú‡§∞‡•Ç‡§∞‡•Ä</strong> ‡§π‡•à‡§Ç":
			"Account Start Date is <strong>required</strong>",
		"‡§ï‡§ø‡§∏‡•ç‡§§ ‡§°‡§æ‡§≤‡§®‡§æ <strong>‡§ú‡§∞‡•Ç‡§∞‡•Ä</strong> ‡§π‡•à‡§Ç":
			"Installment is <strong>required</strong>",
		"‡§®‡•â‡§Æ‡§ø‡§®‡•Ä ‡§ï‡§æ ‡§®‡§æ‡§Æ": "Nominee Name",
		"‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞": "Phone No.",
		"‡§´‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ <strong>‡§ó‡§≤‡§§</strong> ‡§π‡•à": "Phone is <strong>invalid</strong>",
		"‡§ñ‡§§‡§æ ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à": "Account is Active",
		"‡§™‡•Ä‡§õ‡•á ‡§ú‡§æ‡§Ø‡•á ‚¨Ö": "Back ‚¨Ö",
		"‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç": "Correct Account",
		"‡§ñ‡§§‡§æ ‡§¨‡§®‡§æ‡§è": "Create Account",
		"üè°": "üè°",
		"‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§§‡§æ‡§∞‡•Ä‡§ñ": "Close Date",
		"‡§Ü‡§∞‡§Ç‡§≠ ‡§§‡§æ‡§∞‡•Ä‡§ñ": "Start Date",
		"‡§ï‡§≤‡•á‡§ï‡•ç‡§∂‡§® ‡§∞‡§æ‡§∂‡§ø": "Collected Amount",
		"‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§∞‡§æ‡§∂‡§ø": "Paid Amount",
		"‡§¨‡§ø‡§≤ ‡§ï‡•Ä ‡§ó‡§à ‡§∞‡§æ‡§∂‡§ø": "Billed Amount",
		"‡§Ö‡§¨ ‡§§‡§ï ‡§ï‡•Ä ‡§∞‡§æ‡§∂‡§ø": "Amount till Now",
		"‡§≤‡•Ä ‡§ú‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§∞‡§æ‡§∂‡§ø": "Amount to be taken",
		‡§¨‡§ï‡§æ‡§Ø‡§æ: "Amount Remaining",
		"‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§®‡§æ": "Cancel",
		‡§§‡§æ‡§∞‡•Ä‡§ñ: "Date",
		‡§Ü‡§ñ‡§∞‡•Ä: "Last",
		‡§ï‡§≤‡•á‡§ï‡•ç‡§ü: "Collect",
		‡§¨‡§ø‡§≤: "Bill",
		‡§≠‡•Å‡§ó‡§§‡§æ‡§®: "Paid",
		"‡§Ü‡§ñ‡§∞‡•Ä ‡§ï‡§≤‡•á‡§ï‡•ç‡§∂‡§® ‡§§‡§æ‡§∞‡•Ä‡§ñ": "Last Collection Date",
		"‡§Ü‡§ñ‡§∞‡•Ä ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§§‡§æ‡§∞‡•Ä‡§ñ": "Last Paid Date",
		"‡§Ü‡§ñ‡§∞‡•Ä ‡§¨‡§ø‡§≤ ‡§§‡§æ‡§∞‡•Ä‡§ñ": "Last Bill Date",
		"‡§∏‡§≠‡•Ä ‡§ñ‡§æ‡§§‡•á ‡§¶‡•á‡§ñ‡•á": "View All Account",
		"‡§¨‡§ï‡§æ‡§Ø‡§æ ‡§ñ‡§æ‡§§‡•á ‡§¶‡•á‡§ñ‡•á": "View Pending Account",
		"‡§ï‡§≤‡•á‡§ï‡•ç‡§∂‡§® ‡§∏‡•Ç‡§ö‡•Ä": "Collection List",
		"‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§∏‡•Ç‡§ö‡•Ä": "Paid List",
		"‡§ñ‡§§‡§æ ‡§∏‡•Ç‡§ö‡•Ä": "Account List",
		"‡§ñ‡§æ‡§§‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£": "Account Detail",
		"‡§Æ‡§ö‡•Å‡§∞‡•á‡§ü‡•Ä ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ": "Maturity Date",
		"‡§π‡•ã‡§Æ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®": "Home Screen",
		"$ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£": "$ Details",
		"‡§ï‡§≤‡•á‡§ï‡•ç‡§∂‡§® ‡§¨‡§ï‡§æ‡§Ø‡§æ": "Collection Pending",
		"‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§¨‡§ï‡§æ‡§Ø‡§æ": "Payment Pending",
		"‡§¨‡§ø‡§≤ ‡§¨‡§ï‡§æ‡§Ø‡§æ": "Billing Pending",
		"‡§∏.‡§à.‡§´. ‡§®‡§Ç‡§¨‡§∞": "CIF No.",
		"‡§ï‡§≤‡•á‡§ï‡•ç‡§∂‡§® ‡§Ø‡§æ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§∏‡•Ç‡§ö‡•Ä ‡§ö‡•Å‡§®‡•á": "Choose Collection or Paid List",
		"‡§Æ‡•à‡§ú‡§ø‡§ï ‡§ñ‡§æ‡§§‡•á ‡§®‡§Ç‡§¨‡§∞": "Magic Account Numbers",
		‡§ü‡•ã‡§ü‡§≤: "Total",
		"‡§ö‡•Å‡§®‡•á ‡§ó‡§è ‡§ñ‡§æ‡§§‡•á:": "Choosen Accounts:",
		‡§∏‡§¨: "All",
		‡§∞‡§æ‡§∂‡§ø: "Amount",
	};

	constructor() {}
	static encrypt(p_value: string) {
		console.log("encrypt", p_value);
		var temp = "";
		var karr = this.key.split("");
		var i = 0;
		p_value.split("").forEach((element) => {
			temp += element + karr[i];
			i++;
			if (i === karr.length) {
				i = 0;
			}
		});

		return this.reverseString(temp);
	}

	static decrypt(p_encrypt_val: string) {
		var temp = "";
		p_encrypt_val = this.reverseString(p_encrypt_val);
		var valarr = p_encrypt_val.split("");

		valarr.forEach((ele, i) => {
			if (i % 2 == 0) {
				temp += ele;
			}
		});

		return temp;
	}
	static reverseString(str: string) {
		return str.split("").reverse().join("");
	}

	static t(p_lang: string, p_str: string): string {
		let temp = "";
		// console.log(p_lang, p_str);
		switch (p_lang) {
			case Language.EN:
				if (new Object(CU.translation).hasOwnProperty(p_str)) {
					temp = CU.translation[p_str];
					// console.log(p_lang, p_str, temp);
				} else {
					temp = "TNA: " + p_str;
				}
				break;
			case Language.HI:
				temp = p_str;
				break;
		}

		return temp;
	}

	static monthDiff(d1: Date, d2: Date) {
		var months;
		months = (d2.getFullYear() - d1.getFullYear()) * 12;
		months -= d1.getMonth();
		months += d2.getMonth();
		return months <= 0 ? 0 : months;
	}
	static addMonths(date: Date, months: number) {
		var d = date.getDate();
		date.setMonth(date.getMonth() + +months);
		if (date.getDate() != d) {
			date.setDate(0);
		}
		return date;
	}
	static dateFinder(
		p_startDate: Date,
		p_installment: number,
		p_paid: number
	): { calcDate: Date; amountShouldBe: number } {
		let finalDate = new Date(
			p_startDate.getFullYear(),
			p_startDate.getMonth(),
			1
		);
		finalDate = this.addMonths(finalDate, Math.floor(p_paid / p_installment));
		finalDate = new Date(finalDate.getFullYear(), finalDate.getMonth(), 0);

		let monthTillNow = this.monthDiff(p_startDate, new Date()) + 1;

		return {
			calcDate: finalDate,
			amountShouldBe: monthTillNow * p_installment,
		};
	}
}
